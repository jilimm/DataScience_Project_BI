install.packages(c("DBI", "RPostgreSQL", "readr", "dplyr", "lubridate"))
head(data0)
head(data0)
library(readr)
library(dplyr)
data0 <- read_delim(file="SuperstoreSales_main.csv",
delim = ";", col_names = TRUE, col_types = NULL)
head(data0)
setwd("~/")
library(DBI)
library(RPostgreSQL)
library(readr)
library(dplyr)
library(lubridate)
#importing data
# use the sql file to put in the column names????
Customers_data <- read.csv(file="./ClassicModels csv/Customers.csv",
sep = ",", header = TRUE)
Employees_data <- read.csv(file="./ClassicModels csv/Employees.csv",
sep = ",", header = TRUE)
Offices_data <- read.csv(file="./ClassicModels csv/Offices.csv",
sep = ",", header = TRUE)
OrderDetails_data <- read.csv(file="./ClassicModels csv/OrderDetails.csv",
sep = ",", header = TRUE)
Orders_data <- read.csv(file="./ClassicModels csv/Orders.csv",
sep = ",", header = TRUE)
Payments_data <- read.csv(file="./ClassicModels csv/Payments.csv",
sep = ",", header = TRUE)
Products_data <- read.csv(file="./ClassicModels csv/Products.csv",
sep = ",", header = TRUE)
ProductLines_data <- read.csv(file="./ClassicModels csv/ProductLines.csv",
sep = ",", header = TRUE)
setwd("C:/Users/Jing Yun/Desktop/DataScience_Project_BI")
library(DBI)
library(RPostgreSQL)
library(readr)
library(dplyr)
library(lubridate)
#importing data
# use the sql file to put in the column names????
Customers_data <- read.csv(file="./ClassicModels csv/Customers.csv",
sep = ",", header = TRUE)
Employees_data <- read.csv(file="./ClassicModels csv/Employees.csv",
sep = ",", header = TRUE)
Offices_data <- read.csv(file="./ClassicModels csv/Offices.csv",
sep = ",", header = TRUE)
OrderDetails_data <- read.csv(file="./ClassicModels csv/OrderDetails.csv",
sep = ",", header = TRUE)
Orders_data <- read.csv(file="./ClassicModels csv/Orders.csv",
sep = ",", header = TRUE)
Payments_data <- read.csv(file="./ClassicModels csv/Payments.csv",
sep = ",", header = TRUE)
Products_data <- read.csv(file="./ClassicModels csv/Products.csv",
sep = ",", header = TRUE)
ProductLines_data <- read.csv(file="./ClassicModels csv/ProductLines.csv",
sep = ",", header = TRUE)
# write into PostegreSQL
Orders <- Orders_data %>%
select(orderNumber, orderDate, requiredDate, shippedDate,customerNumber, comments, status)%>%
left_join(select(Customers_data, 'customerNumber', 'country')) %>%
rename(orderStatus = 'status')%>%
mutate(turnAroundTime = interval(Orders_data$orderDate,Orders_data$shippedDate)/ddays()) %>%
# TODO: fill in the blank rows of the Late column!!!
mutate(Late = ifelse(country == 'Japan',
ifelse(turnAroundTime>8,'Late','NotLate'),
ifelse(turnAroundTime>6,'Late','NotLate' ))) %>%
select(-c(country))
View(Orders)
Orders <- Orders_data %>%
select(orderNumber, orderDate, requiredDate, shippedDate,customerNumber, comments, status)%>%
left_join(select(Customers_data, 'customerNumber', 'country')) %>%
rename(orderStatus = 'status')%>%
mutate(turnAroundTime = interval(Orders_data$orderDate,Orders_data$shippedDate)/ddays()) %>%
# TODO: fill in the blank rows of the Late column!!!
mutate(test = country =='Japan')
mutate(Late = ifelse(country == 'Japan',
ifelse(turnAroundTime>8,'Late','NotLate'),
ifelse(turnAroundTime>6,'Late','NotLate' )))%>%
select(-c(country))
Orders <- Orders_data %>%
select(orderNumber, orderDate, requiredDate, shippedDate,customerNumber, comments, status)%>%
left_join(select(Customers_data, 'customerNumber', 'country')) %>%
rename(orderStatus = 'status')%>%
mutate(turnAroundTime = interval(Orders_data$orderDate,Orders_data$shippedDate)/ddays()) %>%
# TODO: fill in the blank rows of the Late column!!!
mutate(test = 'country' =='Japan') %>%
mutate(Late = ifelse(country == 'Japan',
ifelse(turnAroundTime>8,'Late','NotLate'),
ifelse(turnAroundTime>6,'Late','NotLate' )))%>%
select(-c(country))
library(dplyr)
Orders <- Orders_data %>%
select(orderNumber, orderDate, requiredDate, shippedDate,customerNumber, comments, status)%>%
left_join(select(Customers_data, 'customerNumber', 'country')) %>%
rename(orderStatus = 'status')%>%
mutate(turnAroundTime = interval(Orders_data$orderDate,Orders_data$shippedDate)/ddays()) %>%
# TODO: fill in the blank rows of the Late column!!!
mutate(Late = ifelse(country == 'Japan',
ifelse(turnAroundTime>8,'Late','NotLate'),
ifelse(turnAroundTime>6,'Late','NotLate' ))) %>%
mutate(Late = replace_na(ifelse(turnAroundTime>6, 'Late', 'NotLate')))
library(DBI)
library(RPostgreSQL)
library(readr)
library(dplyr)
library(lubridate)
library(tidyr)
install.packages("tidyr")
library(DBI)
library(RPostgreSQL)
library(readr)
library(dplyr)
library(lubridate)
library(tidyr)
Orders <- Orders_data %>%
select(orderNumber, orderDate, requiredDate, shippedDate,customerNumber, comments, status)%>%
left_join(select(Customers_data, 'customerNumber', 'country')) %>%
rename(orderStatus = 'status')%>%
mutate(turnAroundTime = interval(Orders_data$orderDate,Orders_data$shippedDate)/ddays()) %>%
# TODO: fill in the blank rows of the Late column!!!
mutate(Late = ifelse(country == 'Japan',
ifelse(turnAroundTime>8,'Late','NotLate'),
ifelse(turnAroundTime>6,'Late','NotLate' ))) %>%
mutate(Late = replace_na(ifelse(turnAroundTime>6, 'Late', 'NotLate')))
Orders <- Orders_data %>%
select(orderNumber, orderDate, requiredDate, shippedDate,customerNumber, comments, status)%>%
left_join(select(Customers_data, 'customerNumber', 'country')) %>%
rename(orderStatus = 'status')%>%
mutate(turnAroundTime = interval(Orders_data$orderDate,Orders_data$shippedDate)/ddays()) %>%
# TODO: fill in the blank rows of the Late column!!!
mutate(Late = ifelse(country == 'Japan',
ifelse(turnAroundTime>8,'Late','NotLate'),
ifelse(turnAroundTime>6,'Late','NotLate' ))) %>%
mutate(Late = replace_na(ifelse(turnAroundTime>6,'Late','NotLate')))
Orders <- Orders_data %>%
select(orderNumber, orderDate, requiredDate, shippedDate,customerNumber, comments, status)%>%
left_join(select(Customers_data, 'customerNumber', 'country')) %>%
rename(orderStatus = 'status')%>%
mutate(turnAroundTime = interval(Orders_data$orderDate,Orders_data$shippedDate)/ddays()) %>%
# TODO: fill in the blank rows of the Late column!!!
mutate(Late = ifelse(country == 'Japan',
ifelse(turnAroundTime>8,'Late','NotLate'),
ifelse(turnAroundTime>6,'Late','NotLate' ))) %>%
mutate(Late = replace_na(ifelse(turnAroundTime>6,'Late','NotLate'))) %>%
select(-c(country))
OrderDetails <- OrderDetails_data %>%
left_join(select(Products_data, 'productCode', 'buyPrice')) %>%
## TODO: products without any buy Price --> average the priceEach????? use average
mutate(profits = (priceEach - buyPrice)*quantityOrdered)
View(OrderDetails)
OrderDetails <- OrderDetails_data %>%
left_join(select(Products_data, 'productCode', 'buyPrice')) %>%
## TODO: products without any buy Price --> average the priceEach????? use average
mutate(buyPrice = replace_na(mean(OrderDetails$buyPrice, na.rm = TRUE)))
OrderDetails <- OrderDetails_data %>%
left_join(select(Products_data, 'productCode', 'buyPrice'))
View(Orders)
OrderDetails <- OrderDetails_data %>%
left_join(select(Products_data, 'productCode', 'buyPrice')) %>%
## TODO: products without any buy Price --> average the priceEach????? use average
mutate(is.na(OrderDetails$buyPrice) = mean(buyPrice, na.rm = TRUE) )
OrderDetails <- OrderDetails_data %>%
left_join(select(Products_data, 'productCode', 'buyPrice')) %>%
## TODO: products without any buy Price --> average the priceEach????? use average
mutate(buyPrice[is.na(OrderDetails$buyPrice)] = mean(buyPrice, na.rm = TRUE) )
OrderDetails$buyPrice[is.na(OrderDetails$buyPrice)] <- mean(OrderDetails$buyPrice, na.rm = TRUE)
OrderDetails <- OrderDetails_data %>%
left_join(select(Products_data, 'productCode', 'buyPrice'))
## TODO: products without any buy Price --> average the priceEach????? use average
OrderDetails$buyPrice[is.na(OrderDetails$buyPrice)] <- mean(OrderDetails$buyPrice, na.rm = TRUE)
Orders <- Orders_data %>%
select(orderNumber, orderDate, requiredDate, shippedDate,customerNumber, comments, status)%>%
left_join(select(Customers_data, 'customerNumber', 'country')) %>%
rename(orderStatus = 'status')%>%
mutate(turnAroundTime = interval(Orders_data$orderDate,Orders_data$shippedDate)/ddays()) %>%
mutate(Late = ifelse(country == 'Japan',
ifelse(turnAroundTime>8,'Late','NotLate'),
ifelse(turnAroundTime>6,'Late','NotLate' )))
View(Orders)
Orders$Late[is.na(Orders$Late)] <- ifelse(turnAroundTime>6,'Late','NotLate')
Orders <- Orders_data %>%
select(orderNumber, orderDate, requiredDate, shippedDate,customerNumber, comments, status)%>%
left_join(select(Customers_data, 'customerNumber', 'country')) %>%
rename(orderStatus = 'status')%>%
mutate(turnAroundTime = interval(Orders_data$orderDate,Orders_data$shippedDate)/ddays()) %>%
mutate(Late = ifelse(country == 'Japan',
ifelse(turnAroundTime>8,'Late','NotLate'),
ifelse(turnAroundTime>6,'Late','NotLate' ))) %>%
select(-c(country))
# fill in NA values for Late column
Orders$Late[is.na(Orders$Late)] <- ifelse(Orders$turnAroundTime>6,'Late','NotLate')
OrderDetails <- OrderDetails_data %>%
left_join(select(Products_data, 'productCode', 'buyPrice'))
# fill in buyPrice with average
OrderDetails$buyPrice[is.na(OrderDetails$buyPrice)] <- mean(OrderDetails$buyPrice, na.rm = TRUE)
OrderDetails <- OrderDetails_data %>%
left_join(select(Products_data, 'productCode', 'buyPrice'))
# fill in buyPrice with average
OrderDetails$buyPrice[is.na(OrderDetails$buyPrice)] <- mean(OrderDetails$buyPrice, na.rm = TRUE)
OrderDetails <- OrderDetails %>%
mutate(Profit = (priceEach - buyPrice)*quantityOrdered) %>%
select(-c(orderLineNumber))
OrderDetails <- OrderDetails %>%
mutate(buyPrice = round(buyPrice,2)) %>%
mutate(Profit = (priceEach - buyPrice)*quantityOrdered) %>%
select(-c(orderLineNumber))
OrderDetails <- OrderDetails_data %>%
left_join(select(Products_data, 'productCode', 'buyPrice'))
# fill in buyPrice with average
OrderDetails$buyPrice[is.na(OrderDetails$buyPrice)] <- mean(OrderDetails$buyPrice, na.rm = TRUE)
OrderDetails <- OrderDetails %>%
mutate(buyPrice = round(buyPrice,2))
View(Products_data)
View(Payments_data)
View(Products_data)
OrderDetails <- OrderDetails_data %>%
left_join(select(Products_data, 'productCode', 'buyPrice'))
# fill in buyPrice with average  TODO: check if correct
OrderDetails$buyPrice[is.na(OrderDetails$buyPrice)] <- mean(OrderDetails$buyPrice, na.rm = TRUE)
OrderDetails <- OrderDetails %>%
mutate(buyPrice = round(buyPrice,2)) %>%
mutate(Profit = (priceEach - buyPrice)*quantityOrdered) %>%
select(-c(orderLineNumber))
